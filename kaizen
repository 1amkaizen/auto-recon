#!/bin/bash
# COLOR
COFF='\033[0m' # Text Reset
# Bold
BBlack='\033[1;30m'  # Black
BRed='\033[1;31m'    # Red
BGreen='\033[1;32m'  # Green
BYellow='\033[1;33m' # Yellow
BBlue='\033[1;34m'   # Blue
BPurple='\033[1;35m' # Purple
BCyan='\033[1;36m'   # Cyan
BWhite='\033[1;37m'  # White

Red='\033[0;31m'          # Red
Green='\033[0;32m'
########################################
dirsearchWordlist=/usr/share/wordlists/dirsearch/db/dicc.txt
massdnsWordlist=/usr/share/wordlists/seclists/Discovery/DNS/dns-Jhaddix.txt
subdomainThreads=10
dirsearchThreads=50
massdnsCT=~/tools/massdns/scripts/ct.py
wordlists=/usr/share/wordlists/seclists/Discovery/Web-Content
#######################################
reset=$(tput sgr0)
domain=
subreport=
usage() {
  echo -e "${BYellow}Usage: kaizen -d domain.com " 1>&2
  exit 1
}

while getopts ":d:e:r:" o; do
  case "${o}" in
  d)
    domain=${OPTARG}
    ;;
                                                                                                                                                           
  *)                                                                                                                                                       
    usage                                                                                                                                                  
    ;;                                                                                                                                                     
  esac                                                                                                                                                     
done                                                                                                                                                       
shift $((OPTIND - 1))                                                                                                                                      
                                                                                                                                                           
if [ -z "${domain}" ] && [[ -z ${subreport[@]} ]]; then                                                                                                    
  usage                                                                                                                                                    
  exit 1                                                                                                                                                   
fi                                                                                                                                                         
subenum() {                                                                                                                                                
  curl -s "https://api.certspotter.com/v1/issuances?domain=${domain}&include_subdomains=true&expand=dns_names&expand=cert" | jq ".[].dns_names[]" | sed 's/\"//g' | sed 's/\*\.//g' | sort -u | grep $domain >> ~/report/$domain/domains                                                                              
  assetfinder --subs-only $domain | dnsx -silent  >> ~/report/$domain/domains
  subfinder -silent -d $domain | dnsx -silent >> ~/report/$domain/domains
}

directory(){
echo -ne -e "${Red}SearchDirectory...[ ${reset}"
gobuster dir -u $domain -w $wordlists/directory-list-2.3-small.txt --no-error -q --no-progress -o ~/report/$domain/directory
}

arecords(){
cat ~/report/$domain/hosts | dnsx -silent -a -resp-only  >> ~/report/$domain/arecords
}

hostalive() {
cat ~/report/$domain/domains | sort -u | httprobe -c 80 >> ~/report/$domain/hosts
cat ~/report/$domain/hosts | sed 's/\http\:\/\///g' | sed 's/\https\:\/\///g' | sort -u | while read line; do
probeurl=$(cat ~/report/$domain/hosts | sort -u | grep -m 1 $line)
echo "$probeurl" >> ~/report/$domain/hosts
done
echo "$(cat ~/report/$domain/hosts | sort -u)" >> ~/report/$domain/hosts
}


takeover(){
$massdnsCT $domain 2>/dev/null >> ~/report/$domain/temp.txt
[ -s ~/report/$domain/temp.txt ] && cat ~/report/$domain/temp.txt | massdns -r ~/tools/massdns/lists/resolvers.txt -t A -q -o S -w ~/report/$domain/temp.txt
cat ~/report/$domain/domains | massdns -r ~/tools/massdns/lists/resolvers.txt -t A -q -o S -w ~/report/$domain/temp.txt
cat ~/report/$domain/temp.txt | awk '{print $3}' | sort -u | while read line; do
wildcard=$(cat ~/report/$domain/temp.txt | grep -m 1 $line)
echo -ne "$wildcard" >> ~/report/$domain/cleantemp.txt
done

cat ~/report/$domain/cleantemp.txt | grep CNAME >> ~/report/$domain/cnames.txt
cat ~/report/$domain/cnames.txt | sort -u | while read line; do
hostrec=$(echo "$line" | awk '{print $1}')
if [[ $(host $hostrec | grep NXDOMAIN) != "" ]]
then
echo -e "${red}Check the following domain for NS takeover:  $line ${reset}"
echo -e "$line" >> ~/report/$domain/pos.txt
else
echo  -e 'Working on it...[ '
fi
done
sleep 1
cat ~/report/$domain/cleantemp.txt | awk  '{print $1}' | while read line; do
x="$line"
echo "${x%?}" >> ~/report/$domain/domains
done
sleep 1
}
waybackrecon(){
cat ~/report/$domain/hosts | waybackurls >> ~/report/$domain/wayback/urls
gf xss ~/report/$domain/wayback/urls | sed 's/=.*/=/' | sed 's/URL: //' | anew ~/report/$domain/wayback/params
cat ~/report/$domain/wayback/urls | kxss >> ~/report/$domain/wayback/xss-vuln
}

new(){
cat ~/report/$domain/hosts | hakrawler >> ~/report/$domain/hakrawler.txt
~/tools/ParamSpider/paramspider.py -d $domain -q --level high -o ~/report/$domain/paramspider.txt
gau $domain >> ~/report/$domain/gau.txt
mkdir ~/report/$domain/gf-out
echo -ne -e "${Red}search xss... \r${reset}"
gf xss ~/report/$domain/paramspider.txt >> ~/report/$domain/gf-out/gf-xss
echo -e "${White} Output ==> ${BYellow}gf-out/gf-xss ${reset}"
echo -ne -e "${Red}search potential... \r${reset}"
gf potential ~/report/$domain/paramspider.txt >> ~/report/$domain/gf-out/gf-potential
echo -e "${White} Output ==> ${BYellow}gf-out/gf-potential ${reset}"
echo -ne -e "${Red}search debug_logic... \r${reset}"
gf debug_logic ~/report/$domain/paramspider.txt >> ~/report/$domain/gf-out/gf-debug_logic
echo -e "${White} Output ==> ${BYellow}gf-out/gf-debug_logic ${reset}"
echo -ne -e "${Red}search idor... \r${reset}"
gf idor ~/report/$domain/paramspider.txt > ~/report/$domain/gf-out/gf-idor
echo -e "${White} Output ==> ${BYellow}gf-out/gf-idor ${reset}"
echo -ne -e "${Red}search lfi... \r${reset}"
gf lfi ~/report/$domain/paramspider.txt > ~/report/$domain/gf-out/gf-lfi
echo -e "${White} Output ==> ${BYellow}gf-out/gf-lfi ${reset}"
echo -ne -e "${Red}search rce... \r${reset}"
gf rce ~/report/$domain/paramspider.txt > ~/report/$domain/gf-out/gf-rce
echo -e "${White} Output ==> ${BYellow}gf-out/gf-rce ${reset}"
echo -ne -e "${Red}search redirect... \r${reset}"
gf redirect ~/report/$domain/paramspider.txt > ~/report/$domain/gf-out/gf-redirect
echo -e "${White} Output ==> ${BYellow}gf-out/gf-redirect ${reset}"
echo -ne -e "${Red}search sqli... \r${reset}"
gf sqli ~/report/$domain/paramspider.txt > ~/report/$domain/gf-out/gf-sqli
echo -e "${White} Output ==> ${BYellow}gf-out/gf-sqli ${reset}"
echo -ne -e "${Red}search ssrf... \r${reset}"
gf ssrf ~/report/$domain/paramspider.txt > ~/report/$domain/gf-out/gf-ssrf
echo -e "${White} Output ==> ${BYellow}gf-out/gf-ssrf ${reset}"
echo -ne -e "${Red}search ssti... \r${reset}"
gf ssti ~/report/$domain/paramspider.txt > ~/report/$domain/gf-out/gf-ssti
echo -e "${White} Output ==> ${BYellow}gf-out/gf-ssti ${reset}"
}






recon() {
        echo -ne -e "${Red}Subdomain Enumerations on $domain... \r${reset}"
        subenum $domain
        echo -e "${Green}Subdomain Enumerations Success Total : ${BRed}$(wc -l ~/report/$domain/domains | awk '{print $1}')${Green} were found${reset}"
        echo -e "${White} Output ==> ${BYellow}domains ${reset}"
        echo -ne -e "${Red}A-Records enumeration...\r${reset}"
        hostalive $domain
        echo -e "${Green}Hostalive discovery success Total : ${BRed}$(wc -l ~/report/$domain/hosts | awk '{print $1}')${Green} were found${reset}"
        echo -e "${White} Output ==> ${BYellow}hosts ${reset}"
        echo -ne -e "${Red}Check the domain for take over...\r${reset}"
    #arecords $domain
    echo -e "${Green}Ipadddres Enumerations Success Total : ${BRed}$(wc -l ~/report/$domain/arecords | awk '{print $1}')${Green} were found${reset}"
    echo -e "${White} Output ==> ${BYellow}A-Records ${reset}"
    echo -ne -e "${Red}Hostalive discovery...\r${reset}"
        #takeover $domain
        echo -e "${Green}Check the domain success Total : ${BRed}$(wc -l ~/report/$domain/pos.txt | awk '{print $1}')${Green} were found${reset}"
        echo -e "${White} Output ==> ${BYellow}pos.txt ${reset}"
        #echo -ne -e "${Red}SearchDirectory...\r${reset}"
        #directory $domain
    #echo  -e "${Green}Search Directory success${reset}"
    #echo -e "${White} Output ==> ${BYellow}directory ${reset}"
        #new $domain
        echo -ne -e "${Red}Wayback recon...\r${reset}"
        #waybackrecon $domain
        echo  -e "${Green}Wayback recon success${reset}"
        echo -e "${White} Output ==> ${BYellow}wayback/ ${reset}"
}
logo(){
echo -e "
${BBlue} ____  ____ _  __${BRed}___  _____________  _  __
${BBlue}/_  / |_  // |/ ${BRed}/ _ \/ __/ ___/ __ \/ |/ /${BYellow}___
${BBlue} / /__/_ </    ${BRed}/ , _/ _// /__/ /_/ /    /${BYellow}____|==[${BRed}*** ${BGreen}$domain${reset}
${BBlue}/___/____/_/|_${BRed}/_/|_/___/\___/\____/_/|_/ ${BYellow}/|\\
${BRed}----------------------------------------${BYellow}/ | \\  \t${BBlue}~ v1.0.0 ~
"
}
main() {
  if [ -z "${domain}" ]; then
    domain=${subreport[1]}
    foldername=${subreport[2]}
    subd=${subreport[3]}
    report $domain $subd
    exit 1
  fi
  if [ -d "~/report/$domain" ]; then
    echo -e "${Red}Is known target${reset}"
  else
    mkdir ~/report/$domain
  fi
        echo $domain > ~/report/$domain/domains
        mkdir ~/report/$domain/wayback
        touch ~/report/$domain/cleantemp.txt
        touch ~/report/$domain/pos.txt
        cp -r ~/report/css ~/report/$domain
        cp -r ~/report/img ~/report/$domain
        clear
        logo
        recon $domain
        echo -e "${BGreen}Scan for ${BRed}$domain ${BGreen}finished successfully${reset}\r"
        echo  -e "${Green}Create Report...[ ${reset}"
        create.sh -d $domain
        duration=$SECONDS
}
todate=$(date +"%Y-%m-%d")
main $domain
